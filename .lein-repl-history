(use 'looping-is-recursion :reload-all)
(power 2 4)
(power 2 3)
(use 'looping-is-recursion :reload-all)
(power 2 3)
(use 'looping-is-recursion :reload-all)
(power 2 3)
(use 'looping-is-recursion :reload-all)
(power 2 3)
(power 2 4)
(use 'looping-is-recursion :reload-all)
(last-element [1 2 3 4])
(use 'looping-is-recursion :reload-all)
(last-element [1 2 3 4])
(use 'looping-is-recursion :reload-all)
(seq= [1 2 3] [1 2 3])
(use 'looping-is-recursion :reload-all)
(seq= [1 2 3] [1 2 3])
(seq= [1 2 3] '(1 2 3))
(seq= [1 2 3] [1 2 3 4])
(seq= [1 2 3] [])
(defn loopy-factorial [down-from]
  (loop [acc 1
         n down-from]
    (if (zero? n)
      acc
      (recur (* acc n) (dec n)))))
(loopy-factorial 5)
(use 'looping-is-recursion :reload-all)
(find-first-index zero? [1 1 1 0 3 7 0 2])
(use 'looping-is-recursion :reload-all)
(find-first-index zero? [1 1 1 0 3 7 0 2])
(find-first-index zero? [1 2 3 7 2])
(find-first-index (fn [n] (= n 6) [:cat :dog :six :blorg 6]))
(find-first-index (fn [x] (= n 6)) [:cat :dog :six :blorg 6])
(find-first-index (fn [n] (= n 6)) [:cat :dog :six :blorg 6])
(find-first-index nil? [])
(use 'looping-is-recursion :reload-all)
(avg [0 0 0 4])
(use 'looping-is-recursion :reload-all)
(avg [1 2 3])
(avg [0 0 0 4])
(avg [1 0 0 1])
(use 'looping-is-recursion :reload-all)
(toggle #{:a :b :c} :d)
(toggle #{:a :b :c} :a)
(use 'looping-is-recursion :reload-all)
(parity [:a :b :c])
(parity [:a :b :c :a])
(parity [1 1 2 1 2 3 1 2 3 4])
(doc spit)
(doc slurp)
(use 'looping-is-recursion :reload-all)
(fast-fibo 0)
(fast-fibo 1)
(fast-fibo 2)
(use 'looping-is-recursion :reload-all)
(fast-fibo 0)
(fast-fibo 1)
(fast-fibo 2)
(use 'looping-is-recursion :reload-all)
(fast-fibo 2)
(use 'looping-is-recursion :reload-all)
(fast-fibo 2)
(fast-fibo 0)
(fast-fibo 1)
(fast-fibo 2)
(fast-fibo 3)
(fast-fibo 4)
(fast-fibo 5)
(fast-fibo 7)
(use 'looping-is-recursion :reload-all)
(fast-fibo 0)
(fast-fibo 1)
(use 'looping-is-recursion :reload-all)
(fast-fibo 1)
(use 'looping-is-recursion :reload-all)
(fast-fibo 1)
(fast-fibo 2)
(fast-fibo 3)
(use 'looping-is-recursion :reload-all)
(fast-fibo 1)
(fast-fibo 2)
(use 'looping-is-recursion :reload-all)
(fast-fibo 1)
(fast-fibo 2)
(fast-fibo 3)
(use 'looping-is-recursion :reload-all)
(fast-fibo 0)
(use 'looping-is-recursion :reload-all)
(fast-fibo 1)
(fast-fibo 2)
(fast-fibo 3)
(use 'looping-is-recursion :reload-all)
(fast-fibo 1)
(use 'looping-is-recursion :reload-all)
(fast-fbo 1)
(fast-fibo 0)
(fast-fibo 1)
(fast-fibo 2)
(fast-fibo 3)
(use 'looping-is-recursion :reload-all)
(fast-fibo 1)
(fast-fibo 2)
(fast-fibo 3)
(use 'looping-is-recursion :reload-all)
(fast-fibo 0)
(fast-fibo 1)
(fast-fibo 2)
(fast-fibo 3)
(fast-fibo 4)
(fast-fibo 5)
(fast-fibo 6)
(use 'looping-is-recursion :reload-all)
(fast-fibo 1)
(fast-fibo 2)
(fast-fibo 3)
(use 'looping-is-recursion :reload-all)
(fast-fibo 0)
(fast-fibo 1)
(fast-fibo) 2
(fast-fibo 2)
(fast-fibo 3)
(use 'looping-is-recursion :reload-all)
(fast-fibo 1)
(fast-fibo 2)
(fast-fibo 3)
(use 'looping-is-recursion :reload-all)
(fast-fibo 1)
(fast-fibo 2)
(use 'looping-is-recursion :reload-all)
(fast-fibo 1)
(use 'looping-is-recursion :reload-all)
(fast-fibo 0)
(fast-fibo 1)
(fast-fibo 2)
(fast-fibo 3)
(use 'looping-is-recursion :reload-all)
(fast-fibo 1)
(fast-fibo 2)
(fast-fibo 3)
(fast-fibo 4)
(fast-fibo 5)
(fast-fibo 6)
(use 'looping-is-recursion :reload-all)
(cut-at-repetition [0 1 2 3 3 4 5])
(use 'looping-is-recursion :reload-all)
(cut-at-repetition [0 1 2 3 3 4 5])
(cut-at-repetition [1 1 1 1 1])
(cut-at-repetition [:cat :dog :house :milk 1 :cat :dog])
(conj #{} :cat)
(conj #{:cat} :cat)
(use 'looping-is-recursion :reload-all)
(cut-at-repetition [1 1 1 1 1])
(cut-at-repetition [0 1 2 3 3 4 5])
(cut-at-repetition [:cat :dog :house :milk 1 :cat :dog])
